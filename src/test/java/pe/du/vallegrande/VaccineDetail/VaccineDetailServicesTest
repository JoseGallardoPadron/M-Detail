package pe.du.vallegrande.VaccineDetail.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import pe.du.vallegrande.VaccineDetail.model.VaccineDetailModel;
import pe.du.vallegrande.VaccineDetail.repository.VaccineDetailRepository;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class VaccineDetailServicesTest {

    @Mock
    private VaccineDetailRepository vaccineDetailRepository;

    @InjectMocks
    private VaccineDetailServices vaccineDetailServices;

    private VaccineDetailModel vaccineDetail;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        vaccineDetail = new VaccineDetailModel();
        vaccineDetail.setVaccineDetailId(1L); // Establecer un ID para las pruebas
        // Inicializa otros campos de vaccineDetail según sea necesario
    }

    @Test
    public void testCreateVaccineDetail() {
        when(vaccineDetailRepository.save(any(VaccineDetailModel.class))).thenReturn(Mono.just(vaccineDetail));

        Mono<VaccineDetailModel> result = vaccineDetailServices.createVaccineDetail(vaccineDetail);

        assertNotNull(result);
        assertEquals(vaccineDetail, result.block());
        verify(vaccineDetailRepository, times(1)).save(vaccineDetail);
    }

    @Test
    public void testGetAllVaccineDetails() {
        when(vaccineDetailRepository.findAll()).thenReturn(Flux.just(vaccineDetail));

        Flux<VaccineDetailModel> result = vaccineDetailServices.getAllVaccineDetails();

        assertNotNull(result);
        assertEquals(1, result.count().block());
        verify(vaccineDetailRepository, times(1)).findAll();
    }

    @Test
    public void testGetVaccineDetailById() {
        Long id = 1L;
        when(vaccineDetailRepository.findById(id)).thenReturn(Mono.just(vaccineDetail));

        Mono<VaccineDetailModel> result = vaccineDetailServices.getVaccineDetailById(id);

        assertNotNull(result);
        assertEquals(vaccineDetail, result.block());
        verify(vaccineDetailRepository, times(1)).findById(id);
    }

    @Test
    public void testUpdateVaccineDetail() {
        Long id = 1L;
        when(vaccineDetailRepository.save(any(VaccineDetailModel.class))).thenReturn(Mono.just(vaccineDetail));
        vaccineDetail.setVaccineDetailId(id); // Asegúrate de que el ID sea el correcto

        Mono<VaccineDetailModel> result = vaccineDetailServices.updateVaccineDetail(id, vaccineDetail);

        assertNotNull(result);
        assertEquals(vaccineDetail, result.block());
        verify(vaccineDetailRepository, times(1)).save(vaccineDetail);
    }

    @Test
    public void testDeleteVaccineDetail() {
        Long id = 1L;
        when(vaccineDetailRepository.findById(id)).thenReturn(Mono.just(vaccineDetail));
        when(vaccineDetailRepository.delete(vaccineDetail)).thenReturn(Mono.empty());

        Mono<Void> result = vaccineDetailServices.deleteVaccineDetail(id);

        assertNotNull(result);
        assertEquals(Void.class, result.block());
        verify(vaccineDetailRepository, times(1)).delete(vaccineDetail);
    }

    @Test
    public void testGetVaccineDetailByIdNotFound() {
        Long id = 1L;
        when(vaccineDetailRepository.findById(id)).thenReturn(Mono.empty());

        Mono<VaccineDetailModel> result = vaccineDetailServices.getVaccineDetailById(id);

        assertNotNull(result);
        assertNull(result.block()); // Verifica que el resultado sea nulo
        verify(vaccineDetailRepository, times(1)).findById(id);
    }

    @Test
    public void testUpdateVaccineDetailNotFound() {
        Long id = 1L;
        when(vaccineDetailRepository.findById(id)).thenReturn(Mono.empty());

        Mono<VaccineDetailModel> result = vaccineDetailServices.updateVaccineDetail(id, vaccineDetail);

        assertNotNull(result);
        assertNull(result.block()); // Verifica que el resultado sea nulo
        verify(vaccineDetailRepository, times(1)).findById(id);
    }

    @Test
    public void testDeleteVaccineDetailNotFound() {
        Long id = 1L;
        when(vaccineDetailRepository.findById(id)).thenReturn(Mono.empty());

        Mono<Void> result = vaccineDetailServices.deleteVaccineDetail(id);

        assertNotNull(result);
        assertEquals(Void.class, result.block());
        verify(vaccineDetailRepository, times(0)).delete(any(VaccineDetailModel.class)); // Verifica que no se llame a delete
    }
}
